name: Make S20 FE (Snapdragon) Recovery

on:
  workflow_dispatch:
    inputs:
      LIBRARY_URL:
        description: 'RECOVERY_URL'
        required: true
        default: 'https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp'
      LIBRARY_BRANCH:
        description: 'RECOVERY_BRANCH'
        required: true
        default: 'twrp-11'
      DEVICE_URL:
        description: 'DEVICE_TREE'
        required: true
        default: 'https://github.com/Johx22/device_oppo_OP4F2F'
      DEVICE_BRANCH:
        description: 'DEVICE_BRANCH'
        required: true
        default: 'android-10'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/oppo/OP4F2F'
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'OP4F2F'

env:
  TZ: Asia/Shanghai

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-18.04

    steps:
    - name: Maximize build disk space
      uses: easimon/maximize-build-space@v5
      with:
        root-reserve-mb: 1024
        swap-size-mb: 6144
        remove-dotnet: 'true'
        temp-reserve-mb: 1024
        remove-android: 'true'
        remove-haskell: 'true'

    - name: Check Out
      uses: actions/checkout@main

    - name: Prepare the environment
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
        sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo apt -y autoremove --purge
        sudo apt -y autoclean
        sudo apt clean
        sudo apt update
        sudo apt -y install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip jq bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev imagemagick libbz2-dev libssl-dev lzma ncftp bash-completion python openjdk-8-jdk qemu-user-static

    - name: Set variables
      run: |
        echo "::set-output name=date::$(date +%F)"
      id: var

    - name: Install repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        export PATH=~/bin:$PATH

    - name: Initialize repo
      run: |
        PATH=~/bin:$PATH
        mkdir workspace
        cd workspace
        echo "::set-output name=pwd::$(pwd)"
        git config --global user.name "Hikaru's Action-Build-Bot"
        git config --global user.email "Android@teio.tk"
        repo init --depth=1 -u ${{ github.event.inputs.LIBRARY_URL }} -b ${{ github.event.inputs.LIBRARY_BRANCH }}
      id: pwd

    - name: Repo Sync
      run: |
        PATH=~/bin:$PATH
        cd workspace
        repo sync -j$(nproc --all)

    - name: Clone device
      run: |
        PATH=~/bin:$PATH
        cd ${{ steps.pwd.outputs.pwd }}
        git clone ${{ github.event.inputs.DEVICE_TREE }} -b ${{ github.event.inputs.DEVICE_BRANCH }} ./${{ github.event.inputs.DEVICE_PATH }}

    - name: Building
      run: |
        PATH=~/bin:$PATH
        cd ${{ steps.pwd.outputs.pwd }}
        export ALLOW_MISSING_DEPENDENCIES=true
        export LC_ALL=C
        source build/envsetup.sh
        lunch twrp_${{ github.event.inputs.DEVICE_NAME }}-eng
        make clean && make clobber
        mka recoveryimage -j$(nproc --all)

    - uses: actions/upload-artifact@v2
      with:
       name: recoveryzip
       path: work/out/target/product/*/*.zip

    - uses: actions/upload-artifact@v2
      with:
       name: recoveryimage
       path: work/out/target/product/*/*.img
